import {ChatGameMap, GameState, JokeAndTranslatedJoke, Role, UserChatMap, UserRoleMap} from "./types";
import axios from 'axios';
const googleTTS = require('google-tts-api');
import fs from "fs";
import ffmpeg from "fluent-ffmpeg";
import ffmpegPath from "ffmpeg-static";
import {Model, Recognizer} from 'vosk';
import TelegramBot, {ChatMember, Message} from "node-telegram-bot-api";

require('dotenv').config();

if(ffmpegPath) ffmpeg.setFfmpegPath(ffmpegPath);
const token: string | undefined = process.env.TELEGRAM_TOKEN;
const bot: TelegramBot = new TelegramBot(token, {polling: true});
const VOSK_MODEL_PATH = 'D:/vosk-model-small-uk-v3-small/vosk-model-small-uk-v3-small';
const model = new Model(VOSK_MODEL_PATH);

const defaultGameState: GameState = {
    active: false,
    word: "",
    firstLetter: "",
    revealedLetters: "",
    thinker: null,
    contactWordMap: {},
    contactorsTimer: null,
    activeContactId: null,
    thinkerTimer: null,
    amountOfReadyContactors: 0,
    activeContactorsIds: [],
    lastContactId: 0
}

const chatGameMap: ChatGameMap = {}
const userChatMap: UserChatMap = {}
const userRoleMap: UserRoleMap = {}

const contactCommandRegExp = /^\/contact(?:\s+.*)?$/;

// commands
bot.setMyCommands([
    {command: '/start_bot', description: '–ü–æ—á–∞—Ç–∏ –≥—Ä—É'},
    {command: '/start_game', description: '–ü–æ—á–∞—Ç–∏ –≥—Ä—É'},
    {command: '/zahadaty', description: '–ó–∞–≥–∞–¥–∞—Ç–∏ —Å–ª–æ–≤–æ'},
    {command: '/rules', description: '–ü—Ä–∞–≤–∏–ª–∞'},
    {command: '/game', description: '–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —Ü–∏—Ñ—Ä—É'},
])


function clearGameState(chatId: number): void {
    chatGameMap[chatId] = deepCopyDefaultState();
}


function deepCopyDefaultState() {
    return structuredClone(defaultGameState);
}


function setRoles(userIds: number[], role: Role) {
    for (let userId in userIds)
        userRoleMap[userId] = role;
}


async function thinkerMakesWord(gameState: GameState, messageText: string, userId: number, groupChatId: number) {
    console.log("Thinker makes word")
    if (gameState.word !== "") return
    gameState.word = messageText.toLowerCase();
    gameState.firstLetter = gameState.word[0].toUpperCase();
    gameState.revealedLetters = gameState.firstLetter;
    chatGameMap[groupChatId] =  gameState;

    await bot.sendMessage(userId, "‚úÖ –°–ª–æ–≤–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –ü–æ–≤—ñ–¥–æ–º –¥—Ä—É–∑—ñ–≤, —â–æ –≥—Ä–∞ –ø–æ—á–∞–ª–∞—Å—å.");
    await bot.sendMessage(groupChatId, `‚ÑπÔ∏è –ü–µ—Ä—à–∞ –±—É–∫–≤–∞: *${gameState.firstLetter}*. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É 
    /contact –ø–æ—è—Å–Ω–µ–Ω–Ω—è —Å–ª–æ–≤–∞, —â–æ–± —ñ–Ω—à—ñ –º–æ–≥–ª–∏ —Å–∫–æ–Ω—Ç–∞–∫—Ç—É–≤–∞—Ç–∏ –∑ —Ç–æ–±–æ—é`, {parse_mode: "Markdown"});
}


async function contact(gameState: GameState, message: Message, chatId: number): Promise<void> {
    const userId: number = message.from?.id;
    if (!gameState || !gameState.active || !message.text) {
        await bot.sendMessage(chatId, "–ì—Ä–∞ —â–µ –Ω–µ –ø–æ—á–∞–ª–∞—Å—å! –ù–∞—Ç–∏—Å–Ω–∏ /start_game ");
        return
    }
    if (gameState.activeContactId != null) {
        await bot.sendMessage(chatId, "–õ—é–¥–∏ –≤–∂–µ –∫–æ–Ω—Ç–∞–∫—Ç—É—é—Ç—å! –ó–∞—á–µ–∫–∞–π —Å–≤–æ—î—ó —á–µ—Ä–≥–∏)");
        return
    }
    if (userId === gameState.thinker) {
        await bot.sendMessage(chatId, "–ó–∞–≥–∞–¥—É–≤–∞—á –Ω–µ –º–æ–∂–µ –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É –∫–æ–Ω—Ç–∞–∫—Ç—ñ");
        return
    }
    let activeContactUsers: number[] = await registerContact(gameState, userId, chatId, message);
    const notified: boolean = await notifyContactors(gameState, activeContactUsers, chatId);
    if (notified) {
        await setTimerForContactors(chatId, gameState)
        console.log("SET TIMER FOR THINKER")
        gameState.thinkerTimer = setTimeout(async (): Promise<void> => {
            await bot.sendMessage(chatId, "‚ùå –ó–∞–≥–∞–¥—É–≤–∞—á –Ω–µ –Ω–∞–ø–∏—Å–∞–≤ —Å–ª–æ–≤–æ!")
            gameState.revealedLetters = gameState.word.substring(0, gameState.revealedLetters.length + 1);
            await bot.sendMessage(chatId, `üìù –ù–æ–≤–∞ –±—É–∫–≤–∞: *${gameState.revealedLetters}*`, {parse_mode: "Markdown"});
        }, 5000)
    }
    chatGameMap[chatId] =  gameState;
}


async function registerContact(gameState: GameState, userId: number, chatId: number, message: Message): Promise<number[]> {
    const repliedUserId: number = message.reply_to_message.from.id
    const repliedText: string = message.reply_to_message.text;
    if (!repliedUserId || !repliedText || !contactCommandRegExp.test(repliedText)) return
    gameState.activeContactId = gameState.lastContactId + 1;
    gameState.lastContactId++;
    gameState.activeContactorsIds = [repliedUserId, userId];
    await bot.sendMessage(chatId, `–Ñ –∫–æ–Ω—Ç–∞–∫—Ç`);
    userChatMap[userId] = chatId;
    return gameState.activeContactorsIds;
}


async function notifyContactors(gameState: GameState, activeContactUsers: number[], chatId: number): Promise<boolean> {
    let notified: boolean = true
    gameState.contactWordMap[activeContactUsers[0]] = null;
    gameState.contactWordMap[activeContactUsers[1]] = null;
    console.log("Active contacts", activeContactUsers[0], activeContactUsers[1])
    let contactorIds: number[] = Object.keys(gameState.contactWordMap).map(key => Number(key));
    let usernames: string[] = await getUsernamesByIDs(chatId, contactorIds);
    await bot.sendMessage(chatId, `${usernames[0]} i ${usernames[1]} - —É –≤–∞—Å –∫–æ–Ω—Ç–∞–∫—Ç! –ü–∏—à—ñ—Ç—å —Å–ª–æ–≤–æ –º–µ–Ω—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ)`);
    try {
        await bot.sendMessage(contactorIds[0], `–Ø —Ç—É—Ç! –ü–∏—à–∏ —Å–ª–æ–≤–æ`);
        await bot.sendMessage(contactorIds[1], `–Ø —Ç—É—Ç! –ü–∏—à–∏ —Å–ª–æ–≤–æ`);
    } catch (e) {
        notified = false;
        await bot.sendMessage(chatId, `${usernames[0]} i ${usernames[0]} - –≤–∏ –æ–±–∏–¥–≤–∞ –º–∞—î—Ç–µ —ñ–Ω—ñ—Ü—ñ—é–≤–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∑ –±–æ—Ç–æ–º, —â–æ–± –≥—Ä–∞—Ç–∏!
        –ö–æ–Ω—Ç–∞–∫—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ!`);
        clearContact(chatId);
    }
    return notified;
}


async function getUsernamesByIDs(chatId: number, ids: number[]): Promise<string[]> {
    let usernames: string[] = []
    for (const userId of ids){
        const chatMember: ChatMember = await bot.getChatMember(chatId, userId)
        usernames.push(chatMember.user.first_name + ' ' + chatMember.user.last_name)
    }
    return usernames;
}

async function contactorWritesWord(gameState: GameState, messageText: string, userId: number, groupChatId: number) {
    console.log("CONTACTOR WRITES WORD ")
    if (!gameState.contactWordMap[userId]) return;
    if (gameState.contactWordMap[userId] !== null) return
    gameState.contactWordMap[userId] = messageText.toLowerCase();
    await bot.sendMessage(userId, "‚úÖ –°–ª–æ–≤–æ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ! –¢–µ–ø–µ—Ä –ø–æ–±–∞—á–∏–º–æ —á–∏ —É –≤–∞—Å —Å—Ç–∞–≤—Å—è –∑–±—ñ–≥ ...");
    gameState.amountOfReadyContactors += 1;
    if (gameState.amountOfReadyContactors === 2) {
        console.log("input words", Object.values(gameState.contactWordMap))

        const isCorrect: boolean = isContactCorrect(Object.values(gameState.contactWordMap), gameState.revealedLetters)
        if (isCorrect) {
            await bot.sendMessage(groupChatId, `‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π! –ó–∞–≥–∞–¥—É–≤–∞—á –º–∞—î 4 —Å–µ–∫—É–Ω–¥–∏, —â–æ–± –ø–µ—Ä–µ–±–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç!`, {parse_mode: "Markdown"});

            gameState.thinkerTimer = setTimeout(async () => {
                gameState.revealedLetters = gameState.word.substring(0, gameState.revealedLetters.length + 1);
                await bot.sendMessage(groupChatId, `‚åõ –ó–∞–≥–∞–¥—É–≤–∞—á –ø–æ–ø—É—Å–∫....`, {parse_mode: "Markdown"});
                await bot.sendMessage(groupChatId, `üìù –ù–æ–≤–∞ –±—É–∫–≤–∞: *${gameState.revealedLetters}*`, {parse_mode: "Markdown"});
            }, 4000)
        }
        if (gameState.revealedLetters.length === gameState.word.length) {
            await bot.sendMessage(groupChatId, "üéâ –í—ñ—Ç–∞—î–º–æ! –°–ª–æ–≤–æ –≤—ñ–¥–≥–∞–¥–∞–Ω–µ! –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
            clearGameState(groupChatId);
        }
        if (!isCorrect) {
            await bot.sendMessage(groupChatId, "–ù–∞ –∂–∞–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤–≤–µ–ª–∏ —Ä—ñ–∑–Ω—ñ —Å–ª–æ–≤–∞(. –ù–æ–≤–∞ –±—É–∫–≤–∞ –Ω–µ –±—É–¥–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞");
        }
        clearContact(groupChatId);

        setRoles(Object.keys(gameState.contactWordMap).map(key=>Number(key)), Role.None)
        setRoles([gameState.thinker], Role.None)
    }
}

async function setTimerForContactors(chatId: number, gameState: GameState) {
    await bot.sendMessage(chatId, "üïê –í—ñ–¥–ª—ñ–∫: 5... 4... 3... 2... 1...");
    gameState.contactorsTimer = setTimeout(async () => {
        await bot.sendMessage(chatId, "‚åõ –ß–∞—Å –≤–∏–π—à–æ–≤... –ù–µ –≤—Å—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–ª–æ–≤–æ ..");
        clearContact(chatId)
    }, 5000);
}


async function startGame(gameState: GameState, chatId: number) {
    console.log("Start game")
    if (!gameState) {
        chatGameMap[chatId] = deepCopyDefaultState()
        gameState = chatGameMap[chatId];
    }
    if (gameState.active) {
        await bot.sendMessage(chatId, "–ì—Ä–∞ –≤–∂–µ –π–¥–µ!");
        return;
    }
    clearGameState(chatId);
    gameState.active = true;
    chatGameMap[chatId] = gameState
    await bot.sendMessage(chatId, "üîÆ –•—Ç–æ –∑–∞–≥–∞–¥–∞—î —Å–ª–æ–≤–æ? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /zahadaty");
    return
}


async function newWord(gameState: GameState, chatId: number, userId: number) {
    console.log("new word")
    if (!gameState || !gameState.active) return bot.sendMessage(chatId, "–ì—Ä–∞ —â–µ –Ω–µ –ø–æ—á–∞–ª–∞—Å—å! –ù–∞—Ç–∏—Å–Ω–∏ /start_game");
    if (gameState.thinker) return bot.sendMessage(chatId, "–ó–∞–≥–∞–¥—É–≤–∞—á –≤–∂–µ –≤–∏–±—Ä–∞–Ω–∏–π!");
    gameState.thinker = userId;
    userRoleMap[userId] = Role.Thinker;
    try {
        await bot.sendMessage(userId, "ü§´ –í–≤–µ–¥–∏ —Å–ª–æ–≤–æ, —è–∫–µ —Ç—Ä–µ–±–∞ –∑–∞–≥–∞–¥–∞—Ç–∏. (–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ)");
    } catch (error) {
        await bot.sendMessage(chatId, "ü§´ –ó–∞–π–¥–∏ –≤ –±–æ—Ç–∞, —ñ –Ω–∞—Ç–∏—Å–Ω–∏ start, —Ç–æ–¥—ñ –∑–º–æ–∂–µ—à –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å –≤ —ñ–≥—Ä–∞—Ö");
        gameState.thinker = null;
    }
}


async function thinkerBeatContact(gameState: GameState, messageText: string, groupChatId: number) {
    const contactWords: string[] = Object.values(gameState.contactWordMap);
    if (gameState.thinkerTimer !== null && (messageText.trim() === contactWords[0].trim())) {
        clearContact(groupChatId);
        await bot.sendMessage(groupChatId, "‚ùå –ó–∞–≥–∞–¥—É–≤–∞—á –ø–µ—Ä–µ–±–∏–≤ –≤—ñ–¥–≥–∞–¥—É–≤–∞–Ω–Ω—è! –ù–æ–≤–∞ –±—É–∫–≤–∞ –Ω–µ –±—É–¥–µ –¥–æ–¥–∞–Ω–∞.");
    }
    chatGameMap[groupChatId] = gameState;
}

function clearContact(chatId: number): void {
    let gameState: GameState = chatGameMap[chatId]
    const contactorIds: number[] = gameState.activeContactorsIds
    if(gameState.contactorsTimer) clearTimeout(gameState.contactorsTimer)
    if(gameState.thinkerTimer) clearTimeout(gameState.thinkerTimer)
    gameState.contactorsTimer = null;
    gameState.thinkerTimer = null;
    gameState.activeContactId = null;
    gameState.contactWordMap = {}
    setRoles(contactorIds, Role.None)
}

function getChatIdByThinker(userId: number): number | null {
    const keys: string[] = Object.keys(chatGameMap)
    for (const key of keys) {
        const numberKey: number = Number(key)
        const gameState: GameState = chatGameMap[numberKey];
        if (gameState.thinker === userId) {
            return Number(key);
        }
    }
    return null;
}


function isContactCorrect(contactWords: string[], revealedLetters: string): boolean {
    if (contactWords[0] !== contactWords[1]) return false;
    return contactWords[0].startsWith(revealedLetters.toLowerCase());
}

bot.on('message', async message => {
        const isPrivate: boolean = (message.chat.type === "private");
        const userId: number = message.from.id
        const chatId: number = message.chat.id
        //if public chat
        let gameState: GameState = chatGameMap[chatId];
        let messageText: string = message.text;
        if (!messageText) return

        //–∂–∞—Ä—Ç
        if (messageText.toLowerCase() === "—Ö–æ—á—É –∂–∞—Ä—Ç") {
            const {joke, translatedJoke} = await getJoke()
            if (joke) {
                await bot.sendMessage(chatId, joke);
            }
            if (translatedJoke) {
                await bot.sendMessage(chatId, translatedJoke);
                await sendVoice(translatedJoke, 1.3, chatId);
            }
            return
        }

        //–∂–∞—Ä—Ç –ø—Ä–æ –ü–ª–∞—Ç–æ–Ω–∞
        if (messageText.toLowerCase() === "—Ç–∏ —á–∞—Å–æ–º –Ω–µ –¥—É—à–Ω—ñ–ª–∞?") {
            const platonJokeChunk1 = "" +
                "–Ø–∫–æ—Å—å –ü–ª–∞—Ç–æ–Ω —Å–∫–∞–∑–∞–≤: \"–õ—é–¥–∏–Ω–∞ ‚Äî —Ü–µ —Ç–≤–∞—Ä–∏–Ω–∞ –Ω–∞ –¥–≤–æ—Ö –Ω–æ–≥–∞—Ö, –ø–æ–∑–±–∞–≤–ª–µ–Ω–∞ –ø—ñ—Ä'—è.\"\n" +
                "–¶–µ –ø–æ—á—É–≤ –î—ñ–æ–≥–µ–Ω, –æ–±—Å–∫—É–± –ø—ñ–≤–Ω—è —ñ –ø–æ–∫–∞–∑–∞–≤ –ü–ª–∞—Ç–æ–Ω—É:\n" +
                "‚Äî –û—Å—å —Ç–æ–±—ñ –ø–ª–∞—Ç–æ–Ω—ñ–≤—Å—å–∫–∞ –ª—é–¥–∏–Ω–∞!\n";
            const platonJokeChunk2 = "–ü–ª–∞—Ç–æ–Ω –≤—ñ–¥–ø–æ–≤—ñ–≤:\n" +
                "‚Äî –ë–ª—è, –Ω—É —Ç–∏ –π –¥—É—à–Ω—ñ–ª–∞ –π–æ–±–∞–Ω–∏–π!!!\n" +
                "–Ü —Ä–æ–∑–Ω—ñ—Å –î—ñ–æ–≥–µ–Ω—É —Ö–∞—Ç—É. üòÜ";
            if (message.reply_to_message) {
                const repliedUser = message.reply_to_message.from;
                const jokeStart = `${repliedUser.first_name}, —è –≤—ñ–¥–ø–æ–≤—ñ–º —Ç–æ–±—ñ –Ω–∞ —Ü–µ –º–æ—ó–º —É–ª—é–±–ª–µ–Ω–∏–º –∞–Ω–µ–∫–¥–æ—Ç–æ–º.`
                await sendVoice(jokeStart, 1.5, chatId);
                await sendVoice(platonJokeChunk1, 1.7, chatId);
                return await sendVoice(platonJokeChunk2, 1.7, chatId);
            }
        }

        //–ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç
        if (isPrivate) {
            if (messageText === "/start_bot") {
                return await bot.sendMessage(chatId, "–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å –≤ —ñ–≥—Ä–∞—Ö")
            }
            const groupChatId: number = userChatMap[userId];
            const role: Role = userRoleMap[userId];
            let gameState: GameState = chatGameMap[groupChatId];
            if (role === Role.Thinker) {
                console.log("Thinker role")
                if (gameState.thinkerTimer) return await thinkerBeatContact(gameState, messageText, groupChatId)
                return await thinkerMakesWord(gameState, messageText, userId, groupChatId)
            }
            if (role === Role.Contactor) {
                console.log("Contactor role")
                return await contactorWritesWord(gameState, messageText, userId, groupChatId)
            }
            return
        } else {
            console.log("chat is public")
            //—á–∞—Ç –ø—É–±–ª—ñ—á–Ω–∏–π
            if (!userChatMap[userId]) {
                userChatMap[userId] = chatId
            }
            if (messageText.startsWith("/start_game")) {
                return await startGame(gameState, chatId)
            }
            console.log(gameState?.active)
            console.log(gameState)
            console.log(messageText)
            if (!gameState || !gameState.active || !messageText) return;
            if (messageText.startsWith("/zahadaty")) {
                return await newWord(gameState, chatId, userId)
            }
            if (contactCommandRegExp.test(messageText)) {
                return await contact(gameState, message, chatId)
            }
            //–¥–æ–¥–∞—Ç–∏ —É–º–æ–≤—É —â–æ —Ü–µ –º–∞—î –±—É—Ç–∏ –Ω–µ thinker
            if (messageText === gameState.word) {
                await bot.sendMessage(chatId, "üéâ –í—ñ—Ç–∞—î–º–æ! –°–ª–æ–≤–æ –≤—ñ–¥–≥–∞–¥–∞–Ω–µ! –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
                clearGameState(chatId);
                setRoles(Object.keys(gameState.contactWordMap).map(key => Number(key)), Role.None)
                setRoles([gameState.thinker], Role.None)
            }
        }
    }
)

async function getJoke(): Promise<JokeAndTranslatedJoke> {
    try {
        const response = await axios.get(process.env.JOKE_API_URL, {
            headers: {'X-Api-Key': process.env.JOKE_API_KEY}
        });
        const joke: string = response.data[0].joke
        const translatedJoke: string = await translateText(joke)
        return {joke, translatedJoke};
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∂–∞—Ä—Ç—É:', error.response ? error.response.data : error.message);
    }
}

async function translateText(text: string) {
    try {
        const response = await axios.get("https://api.mymemory.translated.net/get", {
            params: {
                q: text,
                langpair: "en|uk"
            }
        });
        return response.data.responseData.translatedText;
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É:", error);
        return text;
    }
}

async function sendVoice(text: string, speedUp: number, chatId: number) {
    try {
        const url: string = googleTTS.getAudioUrl(text, {
            lang: "uk",
            slow: false,
            host: "https://translate.google.com",
        });
        console.log(url)
        const response = await axios.get(url, {responseType: "arraybuffer"});
        const mp3Path = "joke.mp3";
        fs.writeFileSync(mp3Path, response.data);
        const fastMp3Path = "joke_fast.mp3";
        // –ü—Ä–∏—Å–∫–æ—Ä—é—î–º–æ –∞—É–¥—ñ–æ –Ω–∞ 30%
        await new Promise((resolve, reject) => {
            ffmpeg(mp3Path)
                .audioFilter(`atempo=${speedUp}`) // 1.3 = +30% —à–≤–∏–¥–∫–æ—Å—Ç—ñ
                .on("end", resolve)
                .on("error", reject)
                .save(fastMp3Path);
        });
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–µ –∞—É–¥—ñ–æ
        await bot.sendVoice(chatId, fastMp3Path);
        // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
        fs.unlinkSync(mp3Path);
        fs.unlinkSync(fastMp3Path);
        console.log("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!");
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ:", error);
    }
}

//–ø–µ—Ä–µ–∫–ª–∞–¥ –≤–æ–π—Å—É –≤ —Ç–µ–∫—Å—Ç
// bot.on('voice', async (msg) => {
//     const chatId: number = msg.chat.id;
//     const fileId: string = msg.voice.file_id;
//     try {
//         // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–∞–π–ª
//         const fileLink: string = await bot.getFileLink(fileId);
//         const oggPath = 'voice.ogg';
//         const wavPath = 'voice.wav';
//         // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
//         const response = await axios.get(fileLink, { responseType: 'arraybuffer' });
//         fs.writeFileSync(oggPath, response.data);
//         // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ .ogg —É .wav (16kHz, –º–æ–Ω–æ)
//         await new Promise((resolve, reject) => {
//             ffmpeg(oggPath)
//                 .toFormat('wav')
//                 .audioFrequency(16000)
//                 .audioChannels(1)
//                 .on('end', resolve)
//                 .on('error', reject)
//                 .save(wavPath);
//         });
//         // –í–∏–∫–æ–Ω—É—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ —á–µ—Ä–µ–∑ Vosk
//         const rec = new Recognizer({ model: model, sampleRate: 16000 });
//         const audioData: Buffer = fs.readFileSync(wavPath);
//         rec.acceptWaveform(audioData);
//         const result: string = rec.result().text
//         let text: string = ''
//         if(result) text = result
//             else text = '–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≥–æ–ª–æ—Å.'
//         // –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –π–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–º
//         await bot.sendMessage(chatId, text, {reply_to_message_id: msg.message_id});
//         // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
//         fs.unlinkSync(oggPath);
//         fs.unlinkSync(wavPath);
//     } catch (error) {
//         console.error(error);
//         await bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É.');
//     }
// });



